@page "/admin"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using ProjectForum.Data
 
@rendermode InteractiveServer
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Admin")]
 
<h3>Admin</h3>
 
@if (users == null)
{
    <p>Loading users...</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Account</th>
                <th>Role</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var user in users)
            {
                <tr class="@((selectedUser != null && selectedUser.Id == user.Id) ? "table-primary" : "")">
                    <td>@user.Email</td>
                    <td>@string.Join(", ", user.Roles)</td>
                    <td>
                        <button class="btn btn-info btn-sm" @onclick="() => SelectUser(user.Id)">Select</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
 
@if (selectedUser != null)
    {
        <h4>Selected User: @selectedUser.Email</h4>
        <button class="btn btn-success btn-sm" @onclick="MakeAdmin">Make Admin</button>
        <button class="btn btn-warning btn-sm" @onclick="MakeUser">Make User</button>
        <button class="btn btn-danger btn-sm" @onclick="RemoveUserRole">Remove User Role</button>
        <button class="btn btn-dark btn-sm" @onclick="RemoveAdminRole">Remove Admin Role</button>
        <button class="btn btn-outline-danger btn-sm" @onclick="DeleteUser">Delete User</button>
    }
}
 
@code {
private List<UserWithRoles> users = new();
private ApplicationUser selectedUser;
private string adminRole = "Admin";
private string userRole = "User";
 
protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }
 
private async Task LoadUsers()
    {
        users.Clear();
        var allUsers = UserManager.Users.ToList();
 
        foreach (var user in allUsers)
        {
            var roles = await UserManager.GetRolesAsync(user);
            users.Add(new UserWithRoles
                {
                    Id = user.Id,
                    Email = user.Email ?? string.Empty,
                    Roles = roles.ToList()
                });
        }
 
        selectedUser = null;
        StateHasChanged();
    }
 
private async Task SelectUser(string userId)
    {
        selectedUser = await UserManager.FindByIdAsync(userId);
    }
 
private async Task MakeAdmin()
    {
        if (selectedUser == null) return;
 
        await UserManager.AddToRoleAsync(selectedUser, adminRole);
        await LoadUsers();
    }
 
private async Task MakeUser()
    {
        if (selectedUser == null) return;
 
        await UserManager.AddToRoleAsync(selectedUser, userRole);
        await LoadUsers();
    }
 
private async Task RemoveUserRole()
    {
        if (selectedUser == null) return;
 
        await UserManager.RemoveFromRoleAsync(selectedUser, userRole);
        await LoadUsers();
    }
 
private async Task RemoveAdminRole()
    {
        if (selectedUser == null) return;
        await UserManager.RemoveFromRoleAsync(selectedUser, adminRole);
        await LoadUsers();
    }
 
 
private async Task DeleteUser()
    {
        if (selectedUser == null) return;
 
        await UserManager.DeleteAsync(selectedUser);
        await LoadUsers();
    }
 
private class UserWithRoles
    {
        public string Id { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public List<string> Roles { get; set; } = new();
    }
}