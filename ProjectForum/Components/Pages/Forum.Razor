@using ProjectForum.Data
@using ProjectForum.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject PostService PostService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject ApplicationDbContext _context
@attribute [Authorize]
@page "/forum/{categoryText}"


<h3 style="text-align: center;">@category Forum</h3>

<div style="text-align: center;">
    <h4>Create a new post</h4>
</div>

<div class="line"></div>
<style>
    .line {
        border-top: 2px solid black;
        width: 100%;
        margin: 10px 0;
    }
</style>

<input type="text" @bind="newPost.Title" placeholder="Title" class="form-control" />
<br>
<textarea @bind="newPost.Content" placeholder="Content" class="form-control"></textarea>
<br>
<button class="btn btn-outline-success" @onclick="CreatePost">Post</button>
<div class="line"></div>

<div style="text-align: center; margin-bottom: 10px;">
    <label for="sortOptions">Sort by: </label>
    <select id="sortOptions" @bind="selectedFilter" class="form-control" style="width: 200px; display: inline-block;">
        <option value="latest">Latest Posts</option>
        <option value="likes">Most Liked</option>
    </select>
    <button class="btn btn-outline-primary" @onclick="LoadPosts">Apply</button>
</div>

@if (posts == null || posts.Count == 0)
{
    <p>No posts yet in this category. Be the first to post!</p>
}
else
{

@foreach (var post in posts)
{
    <div style="border: 1px solid #000; padding: 20px; width: 70%; margin: 0 auto; background-color: lightgrey;">
        <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
            <small><i><span style="margin-right: 10px;">👤</span>@post.User.UserName</i></small>
            <small><i><span style="margin-right: 10px;">📅</span>@post.PublishedOn.ToString("yyyy-MM-dd, HH:mm")</i></small>
        </div>      

        <br>

        <h4 style="text-align: center;">@post.Title</h4>
        <p style="text-align: center;">@post.Content</p>
    </div>
        
    @if (canModifyPosts.TryGetValue(post.Id, out var canModify) && canModify)
    {
        <div style="width: 70%; margin: 0 auto; text-align: right; margin-top: 10px; margin-bottom: 20px;">
            <button class="btn btn-outline-primary" style="margin-right: 10px;" @onclick="() => ShowEditForm(post)">Edit Post</button>
            <button class="btn btn-outline-danger" @onclick="() => DeletePost(post.Id)">Delete Post</button>
        </div>

        @if (editingPostId == post.Id)
        {
            <div style="width: 70%; margin: 0 auto; text-align: left; margin-bottom: 20px;">
                <h5>Edit Post</h5>
                <input type="text" @bind="editTitle" placeholder="Edit Title" class="form-control" style="margin-bottom: 10px;" />
                <textarea @bind="editContent" placeholder="Edit Content" class="form-control" rows="3" style="margin-bottom: 10px;"></textarea>
                <button class="btn btn-outline-success" @onclick="() => SaveChanges(post, User.Id)">Save Post</button>
            </div>
        }
    }
    <CommentsAndLikes PostId="@post.Id" PostUpdated="LoadPosts" />
  }
}

@code {
    [Parameter] public string categoryText { get; set; }
    private Category category;
    private List<Post> posts = new();
    private Post newPost = new();
    private Dictionary<int, bool> canModifyPosts = new();
    private ApplicationUser User;

    private int editingPostId = 0;
    private string editTitle = " ";
    private string editContent = " ";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = await UserManager.GetUserAsync(authState.User);

        if (User == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        if (Enum.TryParse<Category>(categoryText, true, out var parsedCategory))
        {
            category = parsedCategory;
            await LoadPosts();
        }
        else
        {
            Navigation.NavigateTo("/categories");
        }
    }

    private async Task LoadPosts()
    {
        posts = await PostService.GetPostsByCategory(category) ?? new List<Post>();

        canModifyPosts.Clear();
        foreach (var post in posts)
        {
            canModifyPosts[post.Id] = await PostService.CanModifyPost(post.Id, User.Id);
        }

        StateHasChanged();
    }


    private void ShowEditForm(Post post)
    {
        editingPostId = post.Id;
        editTitle = post.Title;
        editContent = post.Content;
    }

    private async Task SaveChanges(Post post, string userID)
    {
        if (editingPostId != 0)
        {
            var EditPost = await _context.Posts.FirstOrDefaultAsync(p => p.Id == editingPostId);
            if (EditPost != null && EditPost.UserId == userID)
            {
                EditPost.Title = editTitle;
                EditPost.Content = editContent;
                await _context.SaveChangesAsync();
            }
        }
        editingPostId = 0;
        editTitle = " ";
        editContent = " ";
    }

    private async Task CreatePost()
    {
        if (User == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        newPost.PublishedOn = DateTime.Now;
        newPost.UserId = User.Id;
        newPost.Category = category;

        var savedPost = await PostService.CreatePost(newPost);
        if (savedPost != null)
        {
            posts.Add(savedPost);
            canModifyPosts[savedPost.Id] = true;
            newPost = new Post();
            StateHasChanged();
        }
    }

    private async Task DeletePost(int postId)
    {
        if (User == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        var success = await PostService.DeletePost(postId, User.Id);
        if (success)
        {
            posts.RemoveAll(p => p.Id == postId);
            canModifyPosts.Remove(postId);
            StateHasChanged();
        }
    }

    private void NavigateToPost(int postId)
    {
        Navigation.NavigateTo($"/post/{postId}");
    }
    
    private string selectedFilter = "latest"; // Default sorteringsval
    private async Task SortPost()
    {
        posts = await PostService.GetPostsByCategory(category);

        if (selectedFilter == "likes")
        {
            posts = posts.OrderByDescending(p => p.Likes ?? 0).ToList();
        }
        else
        {
            posts = posts.OrderByDescending(p => p.PublishedOn).ToList(); 
        }
        StateHasChanged();
    }
}


