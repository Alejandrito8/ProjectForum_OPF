@using ProjectForum.Data
@using ProjectForum.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization

@rendermode InteractiveServer

@inject PostService PostService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

@attribute [Authorize]
@page "/forum/{categoryText}"

<div style="text-align: center;">
<h3>@category Forum</h3>
</div>

<div class="line"></div>
<style>
    .line {
        border-top: 2px solid black;
        width: 100%;
        margin: 10px 0;
    }
</style>

<div style="text-align: center;">
<h4>Create a new post</h4>
</div>

<input type="text" @bind="newPost.Title" placeholder="Title" class="form-control" />
<br>
<textarea @bind="newPost.Content" placeholder="Content" class="form-control"></textarea>
<br>
<button class="btn btn-outline-success" @onclick="CreatePost">Post</button>
<div class="line"></div>

@if (posts == null || posts.Count == 0)
{
    <br>
    <p>No posts yet in this category. Be the first to post!</p>
}
else
{
    @foreach (var post in posts)
    {
        <div style="text-align: center;">
        <h4>Posts</h4>
        <br>
        </div>        
        <div class="post">
        <div style="border: 1px solid #000; padding: 10px; width: 50%; margin: 0 auto; text-align: center; background-color: lightgrey;">
            <h4>Title: @post.Title</h4>
            <h5>Content: @post.Content</h5>
            <p><small><i>Published on: @post.PublishedOn.ToString("yyyy-MM-dd HH:mm") By: @post.User.UserName</i></small></p>
            <button class="btn btn-outline-primary" @onclick="() => NavigateToPost(post.Id)">View Post</button>
            <button class="btn btn-outline-danger" @onclick="() => DeletePost(post.Id)">Delete Post</button></div>  
        </div>
    }
}


@code {
    [Parameter] public string categoryText { get; set; }
    private Category category;
    private List<Post> posts = new();
    private Post newPost = new();

    protected override async Task OnParametersSetAsync()
    {
        if (Enum.TryParse<Category>(categoryText, true, out var parsedCategory))
        {
            category = parsedCategory;
            posts = await PostService.GetPostsByCategory(category) ?? new List<Post>();
        }
        else
        {
            Navigation.NavigateTo("/categories");
        }
    }

    private async Task CreatePost()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        newPost.PublishedOn = DateTime.Now;
        newPost.UserId = user.Id;
        newPost.Category = category;

        var savedPost = await PostService.CreatePost(newPost);
        if (savedPost != null)
        {
            posts.Add(savedPost);
            newPost = new Post();
            StateHasChanged();
        }
    }

    private async Task DeletePost(int postId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        var success = await PostService.DeletePost(postId, user.Id);
        if (success)
        {
            posts.RemoveAll(p => p.Id == postId);
            StateHasChanged();
        }
    }

    private void NavigateToPost(int postId)
    {
        Navigation.NavigateTo($"/post/{postId}");
    }
}