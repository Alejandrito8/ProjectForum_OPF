@using ProjectForum.Data
@using ProjectForum.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore

@rendermode InteractiveServer

@inject PostService PostService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject ApplicationDbContext _context

@attribute [Authorize]
@page "/forum/{categoryText}"

<h3 style="text-align: center;">@category Forum</h3>

<div class="line"></div>
<style>
    .line {
        border-top: 2px solid black;
        width: 100%;
        margin: 10px 0;
    }
</style>

<div style="text-align: center;">
    <h4>Create a new post</h4>
</div>

<input type="text" @bind="newPost.Title" placeholder="Title" class="form-control" />
<br>
<textarea @bind="newPost.Content" placeholder="Content" class="form-control"></textarea>
<br>
<button class="btn btn-outline-success" @onclick="CreatePost">Post</button>
<div class="line"></div>

@if (posts == null || posts.Count == 0)
{
    <p>No posts yet in this category. Be the first to post!</p>
}
else
{
    @foreach (var post in posts)
    {
        <div style="border: 1px solid #000; padding: 10px; width: 50%; margin: 0 auto; text-align: center; background-color: lightgrey;">
            <h4>@post.Title</h4>
            <p>@post.Content</p>
            <p><small><i>Published: @post.PublishedOn.ToString("yyyy-MM-dd HH:mm") By: @post.User.UserName</i></small></p>

            @if (canModifyPosts.TryGetValue(post.Id, out var canModify) && canModify)
            {
                @* <button class="btn btn-outline-dark" @onclick="() => CommentPost(post)">Comment Post</button> *@
                <button class="btn btn-outline-primary" @onclick="() => ShowEditForm(post)">Edit Post</button>
                <button class="btn btn-outline-danger" @onclick="() => DeletePost(post.Id)">Delete Post</button>

                @if (editingPostId == post.Id)
                {
                    <div>
                        <br>
                        <h5>Edit Post</h5>
                        <button class="btn btn-outline-success" @onclick="() => SaveChanges(post, User.Id)">Save Post</button>
                        <textarea @bind="editTitle" placeholder="Edit Title" class="form-control"></textarea>
                        <textarea @bind="editContent" placeholder="Edit Content" class="form-control"></textarea>
                    </div>
                }
            }
        </div>
    }
}

@code {
    [Parameter] public string categoryText { get; set; }
    private Category category;
    private List<Post> posts = new();
    private Post newPost = new();
    private Dictionary<int, bool> canModifyPosts = new();
    private ApplicationUser User;

    private int editingPostId = 0;
    private string editTitle = " ";
    private string editContent = " ";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = await UserManager.GetUserAsync(authState.User);

        // Handle case where user is not found (redirect to login page)
        if (User == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        if (Enum.TryParse<Category>(categoryText, true, out var parsedCategory))
        {
            category = parsedCategory;
            posts = await PostService.GetPostsByCategory(category) ?? new List<Post>();

            canModifyPosts.Clear();
            foreach (var post in posts)
            {
                canModifyPosts[post.Id] = await PostService.CanModifyPost(post.Id, User.Id);
            }
        }
        else
        {
            Navigation.NavigateTo("/categories");
        }
    }

    private void ShowEditForm(Post post)
    {
        editingPostId = post.Id;
        editTitle = post.Title;
        editContent = post.Content;
    }

    private async Task SaveChanges(Post post, string userID)
    {
        if (editingPostId != 0)
        {
            var EditPost = await _context.Posts.FirstOrDefaultAsync(p => p.Id == editingPostId);
            if (EditPost != null && EditPost.UserId == userID)
            {
                EditPost.Title = editTitle;
                EditPost.Content = editContent;
                await _context.SaveChangesAsync();
            }
        }
        editingPostId = 0;
        editTitle = " ";
        editContent = " ";
    }

    private async Task CreatePost()
    {
        if (User == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        newPost.PublishedOn = DateTime.Now;
        newPost.UserId = User.Id;
        newPost.Category = category;

        var savedPost = await PostService.CreatePost(newPost);
        if (savedPost != null)
        {
            posts.Add(savedPost);
            canModifyPosts[savedPost.Id] = true;
            newPost = new Post();
            StateHasChanged();
        }
    }

    private async Task DeletePost(int postId)
    {
        if (User == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        var success = await PostService.DeletePost(postId, User.Id);
        if (success)
        {
            posts.RemoveAll(p => p.Id == postId);
            canModifyPosts.Remove(postId);
            StateHasChanged();
        }
    }

    private void NavigateToPost(int postId)
    {
        Navigation.NavigateTo($"/post/{postId}");
    }
    
}
