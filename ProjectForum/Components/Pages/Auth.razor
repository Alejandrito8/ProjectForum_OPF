@page "/auth"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims


@inject PostService PostService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Admin Settings</PageTitle>

<div style="text-align: center;">
    <h1>Welcome to the admin settings page!</h1>
    <h5>You as an admin can now see and edit all post and comments on the forum</h5>
</div>

<div class="line"></div>
<style>
    .line {
        border-top: 2px solid black;
        width: 100%;
        margin: 10px 0;
    }
</style>

<div class="container">
    @foreach (var category in Enum.GetValues(typeof(Category)).Cast<Category>())
    {
        <div class="category-section">
            <h3>@category</h3>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th><u>Post</u></th>
                        <th><u>Author</u></th>
                        <th><u>Published</u></th>
                        <th><u>Settings</u></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var post in Posts.Where(p => p.Category == category))
                    {
                        <tr>
                            <td>@post.Title</td>
                            <td>@post.User.UserName</td>
                            <td>@post.PublishedOn.ToString("yyyy-MM-dd HH:mm")</td>
                            <td>
                                <button @onclick="() => DeletePost(post.Id)" class="btn btn-danger btn-sm">Delete Post</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>
<div class="line"></div>

<div class="container">
    <h3>All Comments</h3>
    <table class="table table-striped">
        <thead>
            <tr>
                <th><u>Comment</u></th>
                <th><u>Author</u></th>
                <th><u>Post</u></th>
                <th><u>Created</u></th>
                <th><u>Settings</u></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var comment in Comments)
            {
                <tr>
                    <td>@comment.Content</td>
                    <td>@comment.User.UserName</td>
                    <td>@comment.Post.Title</td>
                    <td>@comment.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>
                        <button @onclick="() => DeleteComment(comment.Id)" class="btn btn-danger btn-sm">Delete Comment</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>



@code {
    private List<Post> Posts = new List<Post>();
    private string userId;

private List<Comment> Comments = new List<Comment>();

protected override async Task OnInitializedAsync()
{
    var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authenticationState.User;
    userId = user?.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

    foreach (var category in Enum.GetValues(typeof(Category)).Cast<Category>())
    {
        var postsForCategory = await PostService.GetPostsByCategory(category);
        Posts.AddRange(postsForCategory);
    }

    
    Comments = await PostService.GetAllComments();
}

private async Task DeleteComment(int commentId)
{
    if (userId == null)
    {
        Console.WriteLine("User not authenticated.");
        return;
    }

    bool result = await PostService.DeleteComment(commentId, userId);
    if (result)
    {
        Console.WriteLine($"Deleted comment with ID: {commentId}");
        var commentToRemove = Comments.FirstOrDefault(c => c.Id == commentId);
        if (commentToRemove != null)
        {
            Comments.Remove(commentToRemove);
        }
    }
    else
    {
        Console.WriteLine($"Failed to delete comment with ID: {commentId}");
    }
}

    private async Task DeletePost(int postId)
    {
        if (userId == null)
        {
            Console.WriteLine("User not authenticated.");
            return;
        }

        bool result = await PostService.DeletePost(postId, userId);
        if (result)
        {
            Console.WriteLine($"Deleted post with ID: {postId}");
            var postToRemove = Posts.FirstOrDefault(p => p.Id == postId);
            if (postToRemove != null)
            {
                Posts.Remove(postToRemove);
            }
        }
        else
        {
            Console.WriteLine($"Failed to delete post with ID: {postId}");
        }
    }
}